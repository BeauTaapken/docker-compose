version: '3.5'
services:
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_NOTIFICATION_REPORT: "true"
      WATCHTOWER_NOTIFICATION_URL: ${DISCORD_URL}
      WATCHTOWER_NOTIFICATION_TEMPLATE: |
        {{- if .Report -}}
          {{- with .Report -}}
        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed
              {{- range .Updated}}
        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}
              {{- end -}}
              {{- range .Fresh}}
        - {{.Name}} ({{.ImageName}}): {{.State}}
            {{- end -}}
            {{- range .Skipped}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
            {{- range .Failed}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
          {{- end -}}
        {{- else -}}
          {{range .Entries -}}{{.Message}}{{"\n"}}{{- end -}}
        {{- end -}}
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      - "--certificatesresolvers.letsencrypt.acme.email=beau@lioncode.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./docker-conf/traefik.yml:/etc/traefik/traefik.yml
    labels:
      - "traefik.enable=true"
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
      # Optional - alternative address used for autodiscovery
      #   - JELLYFIN_PublishedServerUrl=http://example.com
    volumes:
      - /mnt/crucial-ssd/docker-compose/config/jellyfin:/config
      - /mnt/crucial-ssd/docker-compose/cache:/cache
      - /mnt/1tb-hdd/server/Anime:/anime
      - /mnt/1tb-hdd/server/Movies:/movies
      - /mnt/wd-black/server/anime/:/otherAnime
    ports:
      - 8920:8920
    restart: 'unless-stopped'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`beautaapken.duckdns.org`)"
      # Host(`beautaapken.duckdns.org`) && PathPrefix(`/jellyfin`)"
      - "traefik.http.routers.jellyfin.service=jellyfin"
      - "traefik.http.routers.jellyfin.entrypoints=https"
      - "traefik.http.routers.jellyfin.tls=true"
      - "traefik.http.routers.jellyfin.tls.certresolver=letsencrypt"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /mnt/crucial-ssd/docker-compose/config/sonarr:/config
      - /mnt/1tb-hdd/server/Anime/:/anime
      - /mnt/wd-black/server/anime/:/otherAnime
      - /home/beau/Downloads/:/downloads/
    restart: 'unless-stopped'
    # network_mode: service:vpn
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.sonarr.rule=Host(`beautaapken.duckdns.org`)"
      - "traefik.http.routers.sonarr.rule=Host(`beautaapken.duckdns.org`) && PathPrefix(`/sonarr`)"
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.routers.sonarr.entrypoints=https"
      - "traefik.http.routers.sonarr.tls=true"
      # - "traefik.http.routers.sonarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /mnt/crucial-ssd/docker-compose/config/radarr:/config
      - /mnt/1tb-hdd/server/Anime/:/anime
      - /mnt/wd-black/server/anime/:/otherAnime
      - /home/beau/Downloads/:/downloads/
    # network_mode: service:vpn
    restart: 'unless-stopped'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`beautaapken.duckdns.org`) && PathPrefix(`/radarr`)"
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.routers.radarr.entrypoints=https"
      - "traefik.http.routers.radarr.tls=true"
      # - "traefik.http.routers.radarr.tls.certresolver=letsencrypt"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
